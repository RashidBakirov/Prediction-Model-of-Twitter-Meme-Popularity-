# -*- coding: utf-8 -*-
"""Community_feature.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n1TyWk1n-fQZV_WhizgYylFJXqVnzLD3
"""

pip install infomap

import networkx as nx
import matplotlib.pyplot as plt
import matplotlib.colors as colors
from networkx.readwrite import json_graph
from collections import Counter
from math import log
import pathlib
import infomap
import json
import math

"""**get_modules()** returns a dictionary with node ids as keys and modules or communities ids as values bold text. This will be the file used to detect the number of infected communities |C(h)|"""

#Find communities with Infomap
def find_communities(G):
  im = infomap.Infomap()

  for source, target in G.edges: 
    im.add_link(source, target)
    im.run()
  
    communities = im.get_modules()
    nx.set_node_attributes(G, communities, 'community')

    with open('community.json', 'w') as f: 
      json.dump(communities, f)

#draw a network with Networkx (this code was tested with ZACHARY KARATE CLUB dataset http://vlado.fmf.uni-lj.si/pub/networks/data/Ucinet/UciData.htm#zachary )
def draw_network(G):
    # position map
    pos = nx.DiGrpah(G)
    # community index
    communities = [c - 1 for c in nx.get_node_attributes(G, 'community').values()]
    num_communities = max(communities) + 1

    # color map from http://colorbrewer2.org/
    cmap_light = colors.ListedColormap(
        ['Colour_code', 'Colour_code', 'Colour_code', 'Colour_code', 'Colour_code'], 'indexed', num_communities)
    cmap_dark = colors.ListedColormap(
        ['Colour_code', 'Colour_code', 'Colour_code', 'Colour_code', 'Colour_code'], 'indexed', num_communities)

    # edges
    nx.draw_networkx_edges(G, pos)

    # nodes
    node_collection = nx.draw_networkx_nodes(G, pos=pos, node_color=communities, cmap=cmap_light)

    # set node border color to the darker shade
    dark_colors = [cmap_dark(v) for v in communities]
    node_collection.set_edgecolor(dark_colors)

    # Print node labels separately instead
    for n in G.nodes:
        plt.annotate(n,
                     xy=pos[n],
                     textcoords='offset points',
                     horizontalalignment='center',
                     verticalalignment='center',
                     xytext=[0, 2],
                     color=cmap_dark(communities[n]))

    plt.axis('off')
    pathlib.Path("output").mkdir(exist_ok=True)
    plt.savefig("output/community.png")
    #plt.show()

G = nx.read_adjlist("social_netwrok_file.net", create_using=nx.DiGraph(), nodetype=int)

print(nx.info(G))

find_communities(G)
draw_network(G)

early_adopters = # to try ['0', '4', '6', '7'] #list from the set of early adopters 
allcommunities = []

for i in data:
  if i in early_adopters:
    if data[i] not in allcommunities:
      allcommunities.append(data[i])

print(allcommunities)
len(allcommunities)

early_tweets = # to try ['0', '0','4','4','4','6', '8'] #List of user IDs

#Number of infected communitites
tweet_communities = []
for i in early_tweets: 
  if i in data:
    tweet_communities.append(data[i])

tweet_communities

# |T(h/c)| tweets of a meme h in community c
counter_tweets_communities = list(Counter(tweet_communities).values())
counter_tweets_communities

# Number of communitites with early adopters
adopters_communities = []

for i in early_adopters: 
  if i in data:
    adopters_communities.append(data[i])
adopters_communities

# |A(h/c)| tweets of a meme h in community c
counter_adopter_communities = list(Counter(adopters_communities).values())
counter_adopter_communities

#entropy -> 50 represent the number of tweets 
entropy_tweets = -((sum(counter_tweets_communities)/50)*sum([math.log10(i/50) for i in counter_tweets_communities]))
entropy_tweets

#entropy for tweets -> 50 represent the number of tweets
a = (sum(counter_tweets_communities)/50)
b = sum([math.log10(i/len(tweet_communities)) for i in counter_tweets_communities])/50
entropy_tweets = - a * b
entropy_tweets

#entropy for adopters -> 50 represent the number of tweets 
entropy_adopters = -((sum(counter_adopter_communities)/len(early_adopters))*sum([math.log10(i/len(early_adopters)) for i in counter_adopter_communities]))
entropy_adopters